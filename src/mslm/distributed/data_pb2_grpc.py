# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import data_pb2 as data__pb2


class DataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamData = channel.unary_stream(
                '/data.DataService/StreamData',
                request_serializer=data__pb2.StreamRequest.SerializeToString,
                response_deserializer=data__pb2.StreamResponse.FromString,
                )
        self.SaveModel = channel.unary_unary(
                '/data.DataService/SaveModel',
                request_serializer=data__pb2.SaveModelRequest.SerializeToString,
                response_deserializer=data__pb2.SaveModelResponse.FromString,
                )
        self.GetHyperparams = channel.unary_unary(
                '/data.DataService/GetHyperparams',
                request_serializer=data__pb2.Empty.SerializeToString,
                response_deserializer=data__pb2.Hyperparams.FromString,
                )
        self.GetModelParameters = channel.unary_unary(
                '/data.DataService/GetModelParameters',
                request_serializer=data__pb2.Empty.SerializeToString,
                response_deserializer=data__pb2.ModelParameters.FromString,
                )


class DataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHyperparams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelParameters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamData': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamData,
                    request_deserializer=data__pb2.StreamRequest.FromString,
                    response_serializer=data__pb2.StreamResponse.SerializeToString,
            ),
            'SaveModel': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveModel,
                    request_deserializer=data__pb2.SaveModelRequest.FromString,
                    response_serializer=data__pb2.SaveModelResponse.SerializeToString,
            ),
            'GetHyperparams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHyperparams,
                    request_deserializer=data__pb2.Empty.FromString,
                    response_serializer=data__pb2.Hyperparams.SerializeToString,
            ),
            'GetModelParameters': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelParameters,
                    request_deserializer=data__pb2.Empty.FromString,
                    response_serializer=data__pb2.ModelParameters.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'data.DataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/data.DataService/StreamData',
            data__pb2.StreamRequest.SerializeToString,
            data__pb2.StreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data.DataService/SaveModel',
            data__pb2.SaveModelRequest.SerializeToString,
            data__pb2.SaveModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHyperparams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data.DataService/GetHyperparams',
            data__pb2.Empty.SerializeToString,
            data__pb2.Hyperparams.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelParameters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data.DataService/GetModelParameters',
            data__pb2.Empty.SerializeToString,
            data__pb2.ModelParameters.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
